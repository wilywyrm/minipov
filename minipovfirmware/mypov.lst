   1               		.file	"mypov.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
  10               		.text
  11               	.Ltext0:
  89               	.global	delay_ms
  91               	delay_ms:
  92               		.stabd	46,0,0
   1:mypov.c       **** #include <avr/io.h>      // this contains all the IO port definitions
   2:mypov.c       **** #include <avr/interrupt.h>
   3:mypov.c       **** #include <avr/signal.h>
   4:mypov.c       **** #include <avr/pgmspace.h>
   5:mypov.c       **** #include <util/delay.h>
   6:mypov.c       **** 
   7:mypov.c       **** void delay_ms( uint16_t milliseconds)
   8:mypov.c       **** {
  94               	.LM0:
  95               	.LFBB1:
  96               	/* prologue: function */
  97               	/* frame size = 0 */
  98               	/* stack size = 0 */
  99               	.L__stack_usage = 0
   9:mypov.c       ****    for( ; milliseconds > 0; milliseconds--)
 101               	.LM1:
 102 0000 00C0      		rjmp .L2
 103               	.L3:
 104               	.LBB4:
 105               	.LBB5:
 107               	.Ltext1:
   1:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2189 2010-10-13 09:39:34Z aboyapati $ */
  34:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** /**
  99:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    \ingroup util_delay
 100:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 101:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 102:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 103:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 104:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 105:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 106:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 107:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 108:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 109:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 110:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 111:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 112:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 113:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 115:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 116:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 117:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 118:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 119:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 120:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 121:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 122:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 123:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 124:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 125:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 126:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 127:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 128:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay
 129:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****    although this will be deprecated in future.
 130:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 131:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h ****  */
 132:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** void
 133:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 134:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** {
 135:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 136:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	double __tmp ; 
 137:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && !defined(__DELAY_BACKWARD_COMPATIBLE__)
 138:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 139:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 140:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 141:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 142:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 143:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 144:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 145:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 146:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 147:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 148:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#else
 149:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		//round up by default
 150:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 151:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	#endif
 152:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.5.3/../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 109               	.LM2:
 110 0002 EFEC      		 ldi r30,lo8(1999)
 111 0004 F7E0      	    ldi r31,hi8(1999)
 112 0006 3197      	    1:sbiw r30,1
 113 0008 01F4      	    brne 1b
 114 000a 00C0      		rjmp .
 115 000c 0000      		nop
 116               	.LBE5:
 117               	.LBE4:
 119               	.Ltext2:
 121               	.LM3:
 122 000e 0197      		sbiw r24,1
 123               	.L2:
 125               	.LM4:
 126 0010 0097      		sbiw r24,0
 127 0012 01F4      		brne .L3
 128               	/* epilogue start */
  10:mypov.c       ****    {
  11:mypov.c       ****       _delay_ms( 1);
  12:mypov.c       ****    }
  13:mypov.c       **** } 
 130               	.LM5:
 131 0014 0895      		ret
 133               	.Lscope1:
 135               		.stabd	78,0,0
 137               	.global	__vector_4
 139               	__vector_4:
 140               		.stabd	46,0,0
  14:mypov.c       **** 
  15:mypov.c       **** #define TIMER1_PRESCALE_1 1
  16:mypov.c       **** #define TIMER1_PRESCALE_8 2
  17:mypov.c       **** #define TIMER1_PRESCALE_64 3
  18:mypov.c       **** #define TIMER1_PRESCALE_256 4
  19:mypov.c       **** #define TIMER1_PRESCALE_1024 5
  20:mypov.c       **** 
  21:mypov.c       **** // We use these macros because binary constants arent always supported. ugh.
  22:mypov.c       **** #define HEX__(n) 0x##n##UL
  23:mypov.c       **** #define B8__(x) ((x&0x0000000FLU)?1:0)  \
  24:mypov.c       ****                +((x&0x000000F0LU)?2:0)  \
  25:mypov.c       ****                +((x&0x00000F00LU)?4:0)  \
  26:mypov.c       ****                +((x&0x0000F000LU)?8:0)  \
  27:mypov.c       ****                +((x&0x000F0000LU)?16:0) \
  28:mypov.c       ****                +((x&0x00F00000LU)?32:0) \
  29:mypov.c       ****                +((x&0x0F000000LU)?64:0) \
  30:mypov.c       ****                +((x&0xF0000000LU)?128:0)
  31:mypov.c       **** #define B8(d) ((unsigned char)B8__(HEX__(d)))
  32:mypov.c       **** 
  33:mypov.c       **** // it says #YOLO.
  34:mypov.c       **** // no, it says 4209
  35:mypov.c       **** const uint8_t large_image[] PROGMEM = {
  36:mypov.c       **** /*B8(00000000),
  37:mypov.c       **** B8(00100100),
  38:mypov.c       **** B8(00100100),
  39:mypov.c       **** B8(11111111),
  40:mypov.c       **** B8(00100100),
  41:mypov.c       **** B8(00100100),
  42:mypov.c       **** B8(11111111),
  43:mypov.c       **** B8(00100100),
  44:mypov.c       **** B8(00100100),
  45:mypov.c       **** B8(00000000),
  46:mypov.c       **** B8(00000001),
  47:mypov.c       **** B8(00000010),
  48:mypov.c       **** B8(00000100),
  49:mypov.c       **** B8(11111000),
  50:mypov.c       **** B8(00000100),
  51:mypov.c       **** B8(00000010),
  52:mypov.c       **** B8(00000001),
  53:mypov.c       **** B8(00000000),
  54:mypov.c       **** B8(00111100),
  55:mypov.c       **** B8(01000010),
  56:mypov.c       **** B8(10000001),
  57:mypov.c       **** B8(10000001),
  58:mypov.c       **** B8(10000001),
  59:mypov.c       **** B8(01000010),
  60:mypov.c       **** B8(00111100),
  61:mypov.c       **** B8(00000000),
  62:mypov.c       **** B8(11111111),
  63:mypov.c       **** B8(10000000),
  64:mypov.c       **** B8(10000000),
  65:mypov.c       **** B8(10000000),
  66:mypov.c       **** B8(10000000),
  67:mypov.c       **** B8(00000000),
  68:mypov.c       **** B8(00111100),
  69:mypov.c       **** B8(01000010),
  70:mypov.c       **** B8(10000001),
  71:mypov.c       **** B8(10000001),
  72:mypov.c       **** B8(10000001),
  73:mypov.c       **** B8(01000010),
  74:mypov.c       **** B8(00111100),
  75:mypov.c       **** B8(00000000),
  76:mypov.c       **** B8(00000000),
  77:mypov.c       **** B8(00000000),
  78:mypov.c       **** B8(00000000),
  79:mypov.c       **** B8(00000000),
  80:mypov.c       **** B8(00000000),
  81:mypov.c       **** B8(00000000),
  82:mypov.c       **** B8(00000000),
  83:mypov.c       **** B8(00000000),
  84:mypov.c       **** B8(00000000),
  85:mypov.c       **** B8(00000000)  */
  86:mypov.c       **** B8(00011000),
  87:mypov.c       **** B8(00010100),
  88:mypov.c       **** B8(00010010),
  89:mypov.c       **** B8(11111111),
  90:mypov.c       **** B8(00010000),
  91:mypov.c       **** B8(00000000),
  92:mypov.c       **** B8(00000000),
  93:mypov.c       **** B8(10000010),
  94:mypov.c       **** B8(11000001),
  95:mypov.c       **** B8(10100001),
  96:mypov.c       **** B8(10010001),
  97:mypov.c       **** B8(10001110),
  98:mypov.c       **** B8(00000000),
  99:mypov.c       **** B8(00000000),
 100:mypov.c       **** B8(00111100),
 101:mypov.c       **** B8(01000010),
 102:mypov.c       **** B8(10000001),
 103:mypov.c       **** B8(10000001),
 104:mypov.c       **** B8(01000010),
 105:mypov.c       **** B8(00111100),
 106:mypov.c       **** B8(00000000),
 107:mypov.c       **** B8(00000000),
 108:mypov.c       **** B8(00001110),
 109:mypov.c       **** B8(00010001),
 110:mypov.c       **** B8(00010001),
 111:mypov.c       **** B8(00010001),
 112:mypov.c       **** B8(11111110),
 113:mypov.c       **** B8(00000000),
 114:mypov.c       **** B8(00000000),
 115:mypov.c       **** B8(00000000),
 116:mypov.c       **** B8(00000000),
 117:mypov.c       **** B8(00000000)
 118:mypov.c       **** };
 119:mypov.c       **** 
 120:mypov.c       **** // special pointer for reading from ROM memory
 121:mypov.c       **** PGM_P largeimage_p PROGMEM = large_image;
 122:mypov.c       **** 
 123:mypov.c       **** #define NUM_ELEM(x) (sizeof (x) / sizeof (*(x)))
 124:mypov.c       **** int imagesize = NUM_ELEM(large_image);
 125:mypov.c       **** 
 126:mypov.c       **** 
 127:mypov.c       **** // this function is called when timer1 compare matches OCR1A
 128:mypov.c       **** uint8_t j = 0;
 129:mypov.c       **** SIGNAL( SIG_TIMER1_COMPA ) {
 142               	.LM6:
 143               	.LFBB2:
 144 0016 1F92      		push __zero_reg__
 145 0018 0F92      		push r0
 146 001a 0FB6      		in r0,__SREG__
 147 001c 0F92      		push r0
 148 001e 1124      		clr __zero_reg__
 149 0020 2F93      		push r18
 150 0022 3F93      		push r19
 151 0024 8F93      		push r24
 152 0026 9F93      		push r25
 153 0028 EF93      		push r30
 154 002a FF93      		push r31
 155               	/* prologue: Signal */
 156               	/* frame size = 0 */
 157               	/* stack size = 9 */
 158               	.L__stack_usage = 9
 130:mypov.c       ****   if (j >= imagesize) 
 160               	.LM7:
 161 002c 2091 0000 		lds r18,j
 162 0030 30E0      		ldi r19,lo8(0)
 163 0032 8091 0000 		lds r24,imagesize
 164 0036 9091 0000 		lds r25,imagesize+1
 165 003a 2817      		cp r18,r24
 166 003c 3907      		cpc r19,r25
 167 003e 04F0      		brlt .L5
 131:mypov.c       ****     j = 0;
 169               	.LM8:
 170 0040 1092 0000 		sts j,__zero_reg__
 171               	.L5:
 172               	.LBB6:
 132:mypov.c       **** 
 133:mypov.c       ****   // read the image data from ROM
 134:mypov.c       ****   PORTB = pgm_read_byte(largeimage_p + j); 
 174               	.LM9:
 175 0044 8091 0000 		lds r24,j
 176 0048 E82F      		mov r30,r24
 177 004a F0E0      		ldi r31,lo8(0)
 178 004c E050      		subi r30,lo8(-(large_image))
 179 004e F040      		sbci r31,hi8(-(large_image))
 180               	/* #APP */
 181               	 ;  134 "mypov.c" 1
 182 0050 E491      		lpm r30, Z
 183               		
 184               	 ;  0 "" 2
 185               	/* #NOAPP */
 186               	.LBE6:
 187 0052 E8BB      		out 56-32,r30
 135:mypov.c       ****  
 136:mypov.c       ****   j++;
 189               	.LM10:
 190 0054 8F5F      		subi r24,lo8(-(1))
 191 0056 8093 0000 		sts j,r24
 192               	/* epilogue start */
 137:mypov.c       **** }
 194               	.LM11:
 195 005a FF91      		pop r31
 196 005c EF91      		pop r30
 197 005e 9F91      		pop r25
 198 0060 8F91      		pop r24
 199 0062 3F91      		pop r19
 200 0064 2F91      		pop r18
 201 0066 0F90      		pop r0
 202 0068 0FBE      		out __SREG__,r0
 203 006a 0F90      		pop r0
 204 006c 1F90      		pop __zero_reg__
 205 006e 1895      		reti
 207               	.Lscope2:
 209               		.stabd	78,0,0
 211               	.global	main
 213               	main:
 214               		.stabd	46,0,0
 138:mypov.c       **** int main(void) {
 216               	.LM12:
 217               	.LFBB3:
 218               	/* prologue: function */
 219               	/* frame size = 0 */
 220               	/* stack size = 0 */
 221               	.L__stack_usage = 0
 139:mypov.c       **** 
 140:mypov.c       ****   DDRB = 0xFF;       // set all 8 pins on port B to outputs
 223               	.LM13:
 224 0070 8FEF      		ldi r24,lo8(-1)
 225 0072 87BB      		out 55-32,r24
 141:mypov.c       **** 
 142:mypov.c       ****   /*
 143:mypov.c       ****     the frequency of the interrupt overflow is determined by the 
 144:mypov.c       ****     prescaler and overflow value.
 145:mypov.c       ****     freq = clock_frequency / ( 2 * prescaler * overflow_val)
 146:mypov.c       ****     where prescaler can be 1, 8, 64, 256, or 1024
 147:mypov.c       ****     clock_freq is 8MHz
 148:mypov.c       ****     and overflow_val is 16bit
 149:mypov.c       **** 
 150:mypov.c       ****     the overflow value is placed in OCR1A, the prescale is set in TCCR1B
 151:mypov.c       ****     so for example:
 152:mypov.c       ****     A good POV frequency is around 400Hz
 153:mypov.c       ****     desired freq = 400Hz
 154:mypov.c       ****     clock freq = 8MHz
 155:mypov.c       ****     8MHz / (400Hz * 2) = 10000
 156:mypov.c       ****     since 10000 is less than 655536 (largest 16 bit number)
 157:mypov.c       ****     OCR1A = 10000 and the prescale is 1
 158:mypov.c       ****   */
 159:mypov.c       **** 
 160:mypov.c       ****   TCCR1B = (1 << WGM12) | TIMER1_PRESCALE_1;
 227               	.LM14:
 228 0074 89E0      		ldi r24,lo8(9)
 229 0076 8EBD      		out 78-32,r24
 161:mypov.c       ****   OCR1A = (uint16_t)4000;
 231               	.LM15:
 232 0078 80EA      		ldi r24,lo8(4000)
 233 007a 9FE0      		ldi r25,hi8(4000)
 234 007c 9BBD      		out 74+1-32,r25
 235 007e 8ABD      		out 74-32,r24
 162:mypov.c       **** 
 163:mypov.c       ****   TIMSK |= 1 << OCIE1A;   // Output Compare Interrupt Enable (timer 1, OCR1A) 
 237               	.LM16:
 238 0080 89B7      		in r24,89-32
 239 0082 8064      		ori r24,lo8(64)
 240 0084 89BF      		out 89-32,r24
 164:mypov.c       **** 
 165:mypov.c       ****   sei();                 // Set Enable Interrupts
 242               	.LM17:
 243               	/* #APP */
 244               	 ;  165 "mypov.c" 1
 245 0086 7894      		sei
 246               	 ;  0 "" 2
 247               	/* #NOAPP */
 248               	.L7:
 249 0088 00C0      		rjmp .L7
 251               	.Lscope3:
 253               		.stabd	78,0,0
 254               	.global	large_image
 255               		.section	.progmem.data,"a",@progbits
 258               	large_image:
 259 0000 18        		.byte	24
 260 0001 14        		.byte	20
 261 0002 12        		.byte	18
 262 0003 FF        		.byte	-1
 263 0004 10        		.byte	16
 264 0005 00        		.byte	0
 265 0006 00        		.byte	0
 266 0007 82        		.byte	-126
 267 0008 C1        		.byte	-63
 268 0009 A1        		.byte	-95
 269 000a 91        		.byte	-111
 270 000b 8E        		.byte	-114
 271 000c 00        		.byte	0
 272 000d 00        		.byte	0
 273 000e 3C        		.byte	60
 274 000f 42        		.byte	66
 275 0010 81        		.byte	-127
 276 0011 81        		.byte	-127
 277 0012 42        		.byte	66
 278 0013 3C        		.byte	60
 279 0014 00        		.byte	0
 280 0015 00        		.byte	0
 281 0016 0E        		.byte	14
 282 0017 11        		.byte	17
 283 0018 11        		.byte	17
 284 0019 11        		.byte	17
 285 001a FE        		.byte	-2
 286 001b 00        		.byte	0
 287 001c 00        		.byte	0
 288 001d 00        		.byte	0
 289 001e 00        		.byte	0
 290 001f 00        		.byte	0
 291               	.global	largeimage_p
 294               	largeimage_p:
 295 0020 0000      		.word	large_image
 296               	.global	imagesize
 297               		.data
 300               	imagesize:
 301 0000 2000      		.word	32
 302               	.global	j
 303               	.global	j
 304               		.section .bss
 307               	j:
 308 0000 00        		.skip 1,0
 313               		.text
 315               	.Letext0:
 316               	.global __do_copy_data
 317               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:0000000000000000 mypov.c
     /tmp/ccA4kPil.s:2      *ABS*:000000000000003f __SREG__
     /tmp/ccA4kPil.s:3      *ABS*:000000000000003e __SP_H__
     /tmp/ccA4kPil.s:4      *ABS*:000000000000003d __SP_L__
     /tmp/ccA4kPil.s:5      *ABS*:0000000000000034 __CCP__
     /tmp/ccA4kPil.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccA4kPil.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccA4kPil.s:91     .text:0000000000000000 delay_ms
     /tmp/ccA4kPil.s:139    .text:0000000000000016 __vector_4
     /tmp/ccA4kPil.s:307    .bss:0000000000000000 j
     /tmp/ccA4kPil.s:300    .data:0000000000000000 imagesize
     /tmp/ccA4kPil.s:258    .progmem.data:0000000000000000 large_image
     /tmp/ccA4kPil.s:213    .text:0000000000000070 main
     /tmp/ccA4kPil.s:294    .progmem.data:0000000000000020 largeimage_p

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
